// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ParkEFI.Infrastructure;

namespace ParkEFI.Infrastructure.Migrations
{
    [DbContext(typeof(ParkEFIDbContext))]
    [Migration("20211021035026_Create tables, Companies, Coordinates, Garages, ParkingBase, Parkings, Streets")]
    partial class CreatetablesCompaniesCoordinatesGaragesParkingBaseParkingsStreets
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("ParkEFI")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ParkEFI.Domain.Entities.CityEntity", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRegister")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 10, 20, 23, 50, 25, 662, DateTimeKind.Local).AddTicks(3056));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.HasKey("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("ParkEFI.Domain.Entities.CompanyEntity", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CompanyOwnerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRegister")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 10, 20, 23, 50, 25, 674, DateTimeKind.Local).AddTicks(61));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.HasKey("CompanyId");

                    b.HasIndex("CompanyOwnerId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("ParkEFI.Domain.Entities.CoordinateEntity", b =>
                {
                    b.Property<int>("CoordinateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("CoordinatePointType")
                        .HasColumnType("tinyint");

                    b.Property<byte>("CoordinateType")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("Latitude")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal>("Longitude")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.HasKey("CoordinateId");

                    b.ToTable("Coordinates");
                });

            modelBuilder.Entity("ParkEFI.Domain.Entities.CountryEntity", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateRegister")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 10, 20, 23, 50, 25, 682, DateTimeKind.Local).AddTicks(4721));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("ParkEFI.Domain.Entities.ParkingBaseEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CoordinateOfParkingId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRegister")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 10, 20, 23, 50, 25, 691, DateTimeKind.Local).AddTicks(2286));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte>("ParkingType")
                        .HasColumnType("tinyint");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CoordinateOfParkingId")
                        .IsUnique();

                    b.HasIndex("CountryId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("ParkingBase");
                });

            modelBuilder.Entity("ParkEFI.Domain.Entities.ParkingBaseStreetEntity", b =>
                {
                    b.Property<int>("ParkingStreetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ParkingBaseId")
                        .HasColumnType("int");

                    b.Property<int>("StreetId")
                        .HasColumnType("int");

                    b.HasKey("ParkingStreetId");

                    b.HasIndex("ParkingBaseId");

                    b.HasIndex("StreetId");

                    b.ToTable("ParkingBaseStreets");
                });

            modelBuilder.Entity("ParkEFI.Domain.Entities.PersonEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Cedula")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("DateRegister")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 10, 20, 23, 50, 25, 736, DateTimeKind.Local).AddTicks(8250));

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstSurname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte>("Gender")
                        .HasMaxLength(20)
                        .HasColumnType("tinyint");

                    b.Property<string>("Names")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<byte>("Persontype")
                        .HasMaxLength(20)
                        .HasColumnType("tinyint");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SecondSurname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("ParkEFI.Domain.Entities.ProvinceEntity", b =>
                {
                    b.Property<int>("ProvinceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRegister")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 10, 20, 23, 50, 25, 739, DateTimeKind.Local).AddTicks(9237));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.HasKey("ProvinceId");

                    b.HasIndex("CityId");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("ParkEFI.Domain.Entities.StreetEntity", b =>
                {
                    b.Property<int>("StreetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GoogleStreetId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("StreetId");

                    b.ToTable("Streets");
                });

            modelBuilder.Entity("ParkEFI.Domain.Entities.UserEntity", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateRegister")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 10, 20, 23, 50, 25, 742, DateTimeKind.Local).AddTicks(2523));

                    b.Property<int>("PersonOfUserId")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.HasIndex("PersonOfUserId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ParkEFI.Domain.Entities.GarageEntity", b =>
                {
                    b.HasBaseType("ParkEFI.Domain.Entities.ParkingBaseEntity");

                    b.Property<string>("ElectricityBill")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("GarageOwnerId")
                        .HasColumnType("int");

                    b.HasIndex("GarageOwnerId");

                    b.ToTable("Garages");
                });

            modelBuilder.Entity("ParkEFI.Domain.Entities.ParkingEntity", b =>
                {
                    b.HasBaseType("ParkEFI.Domain.Entities.ParkingBaseEntity");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<byte>("InfraestructureType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ParkingOwnerId")
                        .HasColumnType("int");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ParkingOwnerId");

                    b.ToTable("Parkings");
                });

            modelBuilder.Entity("ParkEFI.Domain.Entities.GarageOwnerEntity", b =>
                {
                    b.HasBaseType("ParkEFI.Domain.Entities.PersonEntity");

                    b.ToTable("GarageOwners");
                });

            modelBuilder.Entity("ParkEFI.Domain.Entities.ParkingOwnerEntity", b =>
                {
                    b.HasBaseType("ParkEFI.Domain.Entities.PersonEntity");

                    b.Property<byte>("ParkingOwnerType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.ToTable("ParkingOwners");
                });

            modelBuilder.Entity("ParkEFI.Domain.Entities.CityEntity", b =>
                {
                    b.HasOne("ParkEFI.Domain.Entities.CountryEntity", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ParkEFI.Domain.Entities.CompanyEntity", b =>
                {
                    b.HasOne("ParkEFI.Domain.Entities.ParkingOwnerEntity", "CompanyOwner")
                        .WithMany("Companies")
                        .HasForeignKey("CompanyOwnerId");

                    b.Navigation("CompanyOwner");
                });

            modelBuilder.Entity("ParkEFI.Domain.Entities.ParkingBaseEntity", b =>
                {
                    b.HasOne("ParkEFI.Domain.Entities.CityEntity", "City")
                        .WithMany("Parkings")
                        .HasForeignKey("CityId");

                    b.HasOne("ParkEFI.Domain.Entities.CoordinateEntity", "Coordinate")
                        .WithOne("ParkingBase")
                        .HasForeignKey("ParkEFI.Domain.Entities.ParkingBaseEntity", "CoordinateOfParkingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParkEFI.Domain.Entities.CountryEntity", "Country")
                        .WithMany("Parkings")
                        .HasForeignKey("CountryId");

                    b.HasOne("ParkEFI.Domain.Entities.ProvinceEntity", "Province")
                        .WithMany("Parkings")
                        .HasForeignKey("ProvinceId");

                    b.Navigation("City");

                    b.Navigation("Coordinate");

                    b.Navigation("Country");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("ParkEFI.Domain.Entities.ParkingBaseStreetEntity", b =>
                {
                    b.HasOne("ParkEFI.Domain.Entities.ParkingBaseEntity", "ParkingBase")
                        .WithMany("ParkingStreets")
                        .HasForeignKey("ParkingBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParkEFI.Domain.Entities.StreetEntity", "Street")
                        .WithMany("ParkingStreets")
                        .HasForeignKey("StreetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParkingBase");

                    b.Navigation("Street");
                });

            modelBuilder.Entity("ParkEFI.Domain.Entities.ProvinceEntity", b =>
                {
                    b.HasOne("ParkEFI.Domain.Entities.CityEntity", "City")
                        .WithMany("Provinces")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("ParkEFI.Domain.Entities.UserEntity", b =>
                {
                    b.HasOne("ParkEFI.Domain.Entities.PersonEntity", "Person")
                        .WithOne("User")
                        .HasForeignKey("ParkEFI.Domain.Entities.UserEntity", "PersonOfUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ParkEFI.Domain.Entities.GarageEntity", b =>
                {
                    b.HasOne("ParkEFI.Domain.Entities.GarageOwnerEntity", "GarageOwner")
                        .WithMany("Garages")
                        .HasForeignKey("GarageOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParkEFI.Domain.Entities.ParkingBaseEntity", null)
                        .WithOne()
                        .HasForeignKey("ParkEFI.Domain.Entities.GarageEntity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("GarageOwner");
                });

            modelBuilder.Entity("ParkEFI.Domain.Entities.ParkingEntity", b =>
                {
                    b.HasOne("ParkEFI.Domain.Entities.CompanyEntity", "Company")
                        .WithMany("Parkings")
                        .HasForeignKey("CompanyId");

                    b.HasOne("ParkEFI.Domain.Entities.ParkingBaseEntity", null)
                        .WithOne()
                        .HasForeignKey("ParkEFI.Domain.Entities.ParkingEntity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("ParkEFI.Domain.Entities.ParkingOwnerEntity", "ParkingOwner")
                        .WithMany("Parkings")
                        .HasForeignKey("ParkingOwnerId");

                    b.Navigation("Company");

                    b.Navigation("ParkingOwner");
                });

            modelBuilder.Entity("ParkEFI.Domain.Entities.GarageOwnerEntity", b =>
                {
                    b.HasOne("ParkEFI.Domain.Entities.PersonEntity", null)
                        .WithOne()
                        .HasForeignKey("ParkEFI.Domain.Entities.GarageOwnerEntity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ParkEFI.Domain.Entities.ParkingOwnerEntity", b =>
                {
                    b.HasOne("ParkEFI.Domain.Entities.PersonEntity", null)
                        .WithOne()
                        .HasForeignKey("ParkEFI.Domain.Entities.ParkingOwnerEntity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ParkEFI.Domain.Entities.CityEntity", b =>
                {
                    b.Navigation("Parkings");

                    b.Navigation("Provinces");
                });

            modelBuilder.Entity("ParkEFI.Domain.Entities.CompanyEntity", b =>
                {
                    b.Navigation("Parkings");
                });

            modelBuilder.Entity("ParkEFI.Domain.Entities.CoordinateEntity", b =>
                {
                    b.Navigation("ParkingBase");
                });

            modelBuilder.Entity("ParkEFI.Domain.Entities.CountryEntity", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Parkings");
                });

            modelBuilder.Entity("ParkEFI.Domain.Entities.ParkingBaseEntity", b =>
                {
                    b.Navigation("ParkingStreets");
                });

            modelBuilder.Entity("ParkEFI.Domain.Entities.PersonEntity", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("ParkEFI.Domain.Entities.ProvinceEntity", b =>
                {
                    b.Navigation("Parkings");
                });

            modelBuilder.Entity("ParkEFI.Domain.Entities.StreetEntity", b =>
                {
                    b.Navigation("ParkingStreets");
                });

            modelBuilder.Entity("ParkEFI.Domain.Entities.GarageOwnerEntity", b =>
                {
                    b.Navigation("Garages");
                });

            modelBuilder.Entity("ParkEFI.Domain.Entities.ParkingOwnerEntity", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("Parkings");
                });
#pragma warning restore 612, 618
        }
    }
}
